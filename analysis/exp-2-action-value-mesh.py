import numpy as np
import pandas as pd
import csv
import json
import matplotlib
from matplotlib import pyplot as plt
import sys

matplotlib.style.use('ggplot')
from mpl_toolkits.mplot3d import Axes3D


def main():
    # x = {}
    # with open('../agents/records/v10-training-epi-100-vm-10.csv_episode_q_value.csv') as f:
    #     reader = csv.DictReader(f)
    #     for line in reader:
    #         epi = int(line['episode'] + 1
    #         if epi not in x:
    #             x[epi] = {"state": [], "action": [], "reward": []}
    #         x[epi]["state"].append(int(line["state"]))
    #         x[epi]["action"].append(int(line["action"]))
    #         x[epi]["reward"].append(float(line["reward"]))

    # 150 Episode Q-value:
    # {3: [-466.32721741, -469.73150259, -470.61639846, -466.97516725,
    #      -465.3996197, -465.58074043, -469.27979581, -469.15751558,
    #      -471.70458424, -466.62945209], 4: [-472.08261273, -469.88621091, -472.14187761, -470.50063923,
    #                                         -472.5004744, -471.82731101, -472.17305176, -471.16165052,
    #                                         -471.68345391, -470.34001538],
    #  8: [-470.03569482, -472.35058906, -471.4647741, -468.68477584,
    #      -471.11530642, -470.12380329, -471.19801321, -469.82827422,
    #      -469.42778402, -469.15984511], 9: [-470.11816477, -471.91840454, -470.41773102, -472.88317945,
    #                                         -471.74506317, -470.16255133, -470.55854055, -472.54519687,
    #                                         -472.73407724, -470.80618601],
    #  10: [-468.89012095, -469.2412909, -469.52727351, -470.39747307,
    #       -471.287125, -469.37145241, -470.59178189, -469.9365737,
    #       -470.92388576, -471.08826471], 2: [-470.07421661, -469.47622755, -469.6775771, -470.3224168,
    #                                          -470.64705913, -472.16542347, -470.97104336, -469.26792565,
    #                                          -470.97901133, -470.28688812],
    #  6: [-470.90413331, -469.74588141, -469.48112669, -470.32779186,
    #      -466.92230282, -467.40784045, -469.14789984, -471.02127218,
    #      -468.34910406, -467.93111928], 5: [-471.28200386, -470.78270845, -468.0606287, -470.28503192,
    #                                         -469.99848731, -469.74012254, -471.26423002, -468.64900127,
    #                                         -470.72556937, -470.6109399],
    #  7: [-470.0236955, -468.99401559, -469.23626611, -470.80565553,
    #      -468.51792411, -471.06649295, -471.23742521, -468.8497298,
    #      -470.64966245, -470.28031179], 1: [-468.92752351, -468.40404365, -468.84081405, -468.11970335,
    #                                         -470.63880094, -469.08085172, -468.18113343, -466.79895961,
    #                                         -467.40183205, -467.22118329]}

    # 100 episode Q value:
    # {2: [34.36269971, 35.06923774, 34.33646369, 38.69456797, 35.8918449,
    #            36.44739056, 36.10782956, 40.94692452, 39.4263202, 39.25352045],
    #  3: [36.72783392, 38.49747874, 37.02533492, 35.58794284, 42.63041514,
    #            32.98904639, 36.76491319, 37.88485694, 41.41027813, 33.51120744],
    #  4: [39.83215403, 40.99744861, 35.44416509, 36.39413736, 42.90388816,
    #            38.36847273, 30.74910944, 39.34333192, 36.66256257, 37.95197536],
    #  9: [33.19068681, 36.48572114, 43.70897558, 33.58189231, 42.33806093,
    #            39.09618418, 39.89614339, 39.34440913, 34.75726188, 46.95631408],
    #  1: [41.16213348, 35.65700592, 40.81104616, 36.13117556, 36.02762653,
    #            42.19811824, 41.51021243, 37.94067417, 43.47905237, 38.34987887],
    #  5: [47.27307032, 49.65613146, 33.5487757, 37.1503584, 34.82858734,
    #            34.59043268, 51.42254043, 50.96195938, 36.35805654, 35.63090103],
    #  8: [35.11891143, 57.63156476, 39.46393112, 36.07656903, 35.25575115,
    #            39.61773598, 38.00461898, 38.6455926, 38.23635555, 42.25726392],
    #  6: [34.33902163, 41.39029518, 37.98412667, 35.78371752, 39.81953918,
    #            34.32203217, 38.04127688, 47.07508454, 32.45422374, 52.87257149],
    #  7: [40.43406095, 35.41916415, 37.1823841, 33.19832287,
    #            36.45808143, 37.97013398, 36.50678609, 41.33047375,
    #            33.28109903, 164.7895603], 10: [36.40460527, 37.26319895, 36.56859972, 38.59818255, 34.54093514,
    #                                                   36.22331768, 32.52826915, 38.3204162, 37.91526212, 37.38054644]}

    # 50 epsiode Q-value:
    # {10: [13.21702748, 14.46977611, 13.99658298, 13.41878166, 12.30796215,
    #               11.77502567, 12.44663187, 13.06880562, 13.68998726, 15.14312613],
    #          8: [13.52480507, 13.94793306, 13.69151188, 14.21632687, 13.22685848,
    #              14.17866788, 12.96048797, 13.28427791, 13.46205413, 11.89597238],
    #          1: [12.42693356, 12.93397383, 12.89763436, 13.02941754, 11.8215326,
    #              12.39768815, 12.63709767, 12.14955308, 12.54612346, 12.07992792],
    #          7: [13.15485499, 13.30095752, 12.76513263, 12.65936672, 12.86971077,
    #              12.12642086, 13.26714014, 12.62291934, 12.17800317, 12.69783051],
    #          4: [12.22546474, 12.54340438, 11.14080412, 11.91585136, 11.7954021,
    #              12.67128641, 12.28755035, 12.47160306, 11.98272313, 12.51195696],
    #          5: [12.96523175, 12.12950721, 12.56602772, 12.18761668, 12.16599953,
    #              13.31805015, 11.45184884, 12.48771001, 11.99164767, 12.37426063],
    #          6: [12.22972529, 13.09931459, 12.21249681, 13.45334379, 13.0789444,
    #              13.05775831, 12.94164779, 12.89387925, 12.12319995, 12.99003162],
    #          9: [13.46951502, 12.60325153, 13.98009178, 11.81896839, 12.78579212,
    #              14.07231341, 13.07844713, 13.72122851, 13.12137694, 13.79581585],
    #          2: [12.06915133, 13.58829595, 12.60707539, 13.0732521, 13.14719883,
    #              13.27533449, 12.09640029, 13.0131888, 13.53487211, 12.41343562],
    #          3: [12.83156735, 13.18091322, 13.59795225, 15.1569438, 15.05340716,
    #              14.72748463, 12.8719637, 14.66052967, 13.80766571, 13.72523981]}
    V = {10: [13.21702748, 14.46977611, 13.99658298, 13.41878166, 12.30796215,
                  11.77502567, 12.44663187, 13.06880562, 13.68998726, 15.14312613],
             8: [13.52480507, 13.94793306, 13.69151188, 14.21632687, 13.22685848,
                 14.17866788, 12.96048797, 13.28427791, 13.46205413, 11.89597238],
             1: [12.42693356, 12.93397383, 12.89763436, 13.02941754, 11.8215326,
                 12.39768815, 12.63709767, 12.14955308, 12.54612346, 12.07992792],
             7: [13.15485499, 13.30095752, 12.76513263, 12.65936672, 12.86971077,
                 12.12642086, 13.26714014, 12.62291934, 12.17800317, 12.69783051],
             4: [12.22546474, 12.54340438, 11.14080412, 11.91585136, 11.7954021,
                 12.67128641, 12.28755035, 12.47160306, 11.98272313, 12.51195696],
             5: [12.96523175, 12.12950721, 12.56602772, 12.18761668, 12.16599953,
                 13.31805015, 11.45184884, 12.48771001, 11.99164767, 12.37426063],
             6: [12.22972529, 13.09931459, 12.21249681, 13.45334379, 13.0789444,
                 13.05775831, 12.94164779, 12.89387925, 12.12319995, 12.99003162],
             9: [13.46951502, 12.60325153, 13.98009178, 11.81896839, 12.78579212,
                 14.07231341, 13.07844713, 13.72122851, 13.12137694, 13.79581585],
             2: [12.06915133, 13.58829595, 12.60707539, 13.0732521, 13.14719883,
                 13.27533449, 12.09640029, 13.0131888, 13.53487211, 12.41343562],
             3: [12.83156735, 13.18091322, 13.59795225, 15.1569438, 15.05340716,
                 14.72748463, 12.8719637, 14.66052967, 13.80766571, 13.72523981]}

    min_x = min(k for k in V.keys())
    max_x = max(k for k in V.keys())
    # tmp = []
    # for y in V.values():
    #     tmp += y
    # min_y = min(tmp)
    # max_y = max(tmp)

    x_range = np.arange(min_x, max_x + 1)
    y_range = np.arange(min_x, max_x + 1)
    X, Y = np.meshgrid(x_range, y_range)

    # Find value for all (x, y) coordinates
    # Z = np.apply_along_axis(lambda _: V[_[0]][_[1]-1], 2, np.dstack([X, Y]))
    Z = np.zeros(shape=(max_x, max_x))
    for x, v in V.items():
        for i, y in enumerate(v, start=0):
            Z[x - 1, i] = y

    def plot_surface(X, Y, Z, title):
        def find_min_max_range(values):
            a = values.reshape(values.size)
            return min(a), max(a)

        minV, maxV = find_min_max_range(Z)
        fig = plt.figure(figsize=(10, 7))
        ax = fig.add_subplot(111, projection='3d')
        surf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=matplotlib.cm.coolwarm, vmin=minV, vmax=maxV)
        ax.set_xlabel('Preference action')
        ax.set_ylabel('Cluster Size')
        ax.set_zlabel('Q Value')
        ax.set_title(title)
        ax.view_init(ax.elev, -120)
        fig.colorbar(surf)
        fig.savefig(title)
        # if show_plot:
        plt.show()

    plot_surface(X, Y, Z, "")


if __name__ == '__main__':
    sys.exit(main())
